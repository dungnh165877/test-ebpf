// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadParse returns the embedded CollectionSpec for parse.
func loadParse() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ParseBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load parse: %w", err)
	}

	return spec, err
}

// loadParseObjects loads parse and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*parseObjects
//	*parsePrograms
//	*parseMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadParseObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadParse()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// parseSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type parseSpecs struct {
	parseProgramSpecs
	parseMapSpecs
}

// parseSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type parseProgramSpecs struct {
	ClassifyPacket *ebpf.ProgramSpec `ebpf:"classify_packet"`
}

// parseMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type parseMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// parseObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadParseObjects or ebpf.CollectionSpec.LoadAndAssign.
type parseObjects struct {
	parsePrograms
	parseMaps
}

func (o *parseObjects) Close() error {
	return _ParseClose(
		&o.parsePrograms,
		&o.parseMaps,
	)
}

// parseMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadParseObjects or ebpf.CollectionSpec.LoadAndAssign.
type parseMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *parseMaps) Close() error {
	return _ParseClose(
		m.Events,
	)
}

// parsePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadParseObjects or ebpf.CollectionSpec.LoadAndAssign.
type parsePrograms struct {
	ClassifyPacket *ebpf.Program `ebpf:"classify_packet"`
}

func (p *parsePrograms) Close() error {
	return _ParseClose(
		p.ClassifyPacket,
	)
}

func _ParseClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed parse_bpfel.o
var _ParseBytes []byte
